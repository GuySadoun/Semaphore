#include "Semaphore.hpp"


Semaphore::Semaphore() {
    this->val = 0;
    // initialize the lock
    pthread_mutexattr_t attr;
    pthread_mutexattr_init(&attr);
    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ERRORCHECK);
    pthread_mutex_init(&(this->m_lock), &attr);
    // initialize the cond var
    pthread_cond_init(&(this->cv),NULL);
}

Semaphore::Semaphore(int val) {
    this->val = val;
    pthread_mutex_init(&(this->m_lock), NULL);
    // initialize the lock
    pthread_mutexattr_t attr;
    pthread_mutexattr_init(&attr);
    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ERRORCHECK);
    pthread_mutex_init(&(this->m_lock), &attr);
    // initialize the cond var
    pthread_cond_init(&(this->cv),NULL);
}

void Semaphore::up() {
    pthread_mutex_lock(&(this->m_lock));
    val++;
    if (val <= 0) {
        pthread_cond_signal(&(this->cv));
    }
    pthread_mutex_unlock(&(this->m_lock));
}

void Semaphore::down() {
    pthread_mutex_lock(&(this->m_lock));
    val--;
    if (this->val < 0) {
        pthread_cond_wait(&(this->cv), &(this->m_lock));
    }
    pthread_mutex_unlock(&(this->m_lock));
}

Semaphore::~Semaphore() {
    pthread_mutex_destroy(&(this->m_lock));
    pthread_cond_destroy(&(this->cv));
}
